# Cost Optimization Configuration
# This file defines cost optimization settings for different environments

environments:
  dev:
    # Enable automatic shutdown during non-business hours
    auto_shutdown: true
    
    # Business hours configuration (UTC)
    business_hours:
      start: 9   # 9 AM UTC
      end: 18    # 6 PM UTC
      timezone: "UTC"
    
    # Enable weekend shutdown
    weekend_shutdown: true
    
    # Resource scaling configuration for cost optimization
    resource_scaling:
      ecs_task_cpu: 512      # Reduced CPU for dev (0.5 vCPU)
      ecs_task_memory: 1024  # Reduced memory for dev (1 GB)
      lambda_memory: 256     # Reduced Lambda memory for dev
      enable_spot_instances: true
    
    # Cost threshold for alerts (USD per month)
    cost_threshold: 50.0
    
    # Auto-scaling configuration
    auto_scaling:
      enabled: false  # Disable auto-scaling for dev to save costs
      min_capacity: 0
      max_capacity: 1
    
    # Optimization features
    optimization_features:
      scheduled_shutdown: true
      resource_right_sizing: true
      spot_instances: true
      cost_monitoring: true

  staging:
    # No automatic shutdown for staging (needs to be available for testing)
    auto_shutdown: false
    
    # Resource scaling configuration for staging
    resource_scaling:
      ecs_task_cpu: 1024     # Moderate CPU for staging (1 vCPU)
      ecs_task_memory: 2048  # Moderate memory for staging (2 GB)
      lambda_memory: 512     # Moderate Lambda memory for staging
      enable_spot_instances: true  # Use spot for cost savings
    
    # Cost threshold for alerts (USD per month)
    cost_threshold: 200.0
    
    # Auto-scaling configuration
    auto_scaling:
      enabled: true
      min_capacity: 1
      max_capacity: 3
      target_cpu_utilization: 70
      target_memory_utilization: 80
    
    # Optimization features
    optimization_features:
      scheduled_shutdown: false
      resource_right_sizing: true
      spot_instances: true
      cost_monitoring: true

  prod:
    # No automatic shutdown for production
    auto_shutdown: false
    
    # Resource scaling configuration for production
    resource_scaling:
      ecs_task_cpu: 2048     # Full CPU for production (2 vCPU)
      ecs_task_memory: 4096  # Full memory for production (4 GB)
      lambda_memory: 1024    # Full Lambda memory for production
      enable_spot_instances: false  # No spot instances for production reliability
    
    # Cost threshold for alerts (USD per month)
    cost_threshold: 1000.0
    
    # Auto-scaling configuration
    auto_scaling:
      enabled: true
      min_capacity: 2
      max_capacity: 10
      target_cpu_utilization: 60
      target_memory_utilization: 70
    
    # Optimization features
    optimization_features:
      scheduled_shutdown: false
      resource_right_sizing: true
      spot_instances: false
      cost_monitoring: true

# Global optimization rules
optimization_rules:
  # Right-sizing thresholds
  right_sizing:
    cpu_utilization_threshold: 20      # Scale down if CPU < 20%
    memory_utilization_threshold: 30   # Scale down if memory < 30%
    evaluation_period_days: 7          # Evaluate over 7 days
    confidence_threshold: 0.8          # 80% confidence required
    
    # Scaling factors
    downsize_factor: 0.5  # Reduce by 50% when downsizing
    upsize_factor: 1.5    # Increase by 50% when upsizing
  
  # Auto-scaling configuration
  auto_scaling:
    enable_for_environments: ["staging", "prod"]
    scale_down_cooldown: 300  # 5 minutes
    scale_up_cooldown: 60     # 1 minute
    
    # Scaling policies
    cpu_scale_up_threshold: 80
    cpu_scale_down_threshold: 30
    memory_scale_up_threshold: 85
    memory_scale_down_threshold: 40
  
  # Cost monitoring
  cost_monitoring:
    # Alert thresholds (percentage of monthly budget)
    warning_threshold: 80   # Alert at 80% of budget
    critical_threshold: 100 # Critical alert at 100% of budget
    
    # Monitoring frequency
    daily_reports: true
    weekly_reports: true
    monthly_reports: true
    
    # Cost anomaly detection
    anomaly_detection:
      enabled: true
      sensitivity: "medium"  # low, medium, high
      threshold_percentage: 25  # Alert if cost increases by 25%
  
  # Spot instance configuration
  spot_instances:
    # Environments where spot instances are allowed
    allowed_environments: ["dev", "staging"]
    
    # Spot instance settings
    max_spot_percentage: 80  # Maximum 80% spot instances
    fallback_to_on_demand: true
    
    # Interruption handling
    interruption_handling:
      enabled: true
      drain_timeout: 120  # 2 minutes to drain tasks
      replacement_strategy: "immediate"

# Scheduled operations
scheduled_operations:
  # Development environment shutdown schedule
  dev_shutdown:
    enabled: true
    
    # Weekday schedule (Monday-Friday)
    weekday_shutdown:
      time: "18:00"  # 6 PM UTC
      timezone: "UTC"
      days: ["MON", "TUE", "WED", "THU", "FRI"]
    
    weekday_startup:
      time: "09:00"  # 9 AM UTC
      timezone: "UTC"
      days: ["MON", "TUE", "WED", "THU", "FRI"]
    
    # Weekend schedule
    weekend_shutdown:
      time: "18:00"  # Friday 6 PM UTC
      timezone: "UTC"
      day: "FRI"
    
    weekend_startup:
      time: "09:00"  # Monday 9 AM UTC
      timezone: "UTC"
      day: "MON"
  
  # Cost reporting schedule
  cost_reporting:
    daily_report:
      enabled: true
      time: "08:00"  # 8 AM UTC
      recipients: ["devops@company.com"]
    
    weekly_report:
      enabled: true
      time: "08:00"  # Monday 8 AM UTC
      day: "MON"
      recipients: ["devops@company.com", "management@company.com"]
    
    monthly_report:
      enabled: true
      day: 1  # First day of month
      time: "08:00"  # 8 AM UTC
      recipients: ["devops@company.com", "management@company.com", "finance@company.com"]

# Notification settings for cost optimization
notifications:
  # Cost threshold alerts
  cost_alerts:
    enabled: true
    channels: ["slack", "email"]
    
    # Alert templates
    templates:
      warning:
        title: "⚠️ Cost Warning: {environment} approaching budget limit"
        message: "Environment {environment} has reached {percentage}% of monthly budget (${current_cost}/${budget})"
      
      critical:
        title: "🚨 Cost Alert: {environment} exceeded budget limit"
        message: "Environment {environment} has exceeded monthly budget: ${current_cost}/${budget} ({percentage}%)"
      
      optimization:
        title: "💡 Cost Optimization Opportunity"
        message: "Potential savings of ${savings}/month identified for {environment}"
  
  # Optimization completion notifications
  optimization_notifications:
    enabled: true
    channels: ["slack"]
    
    templates:
      resource_sizing:
        title: "🔧 Resource Optimization Complete"
        message: "Optimized resources for {environment}. Estimated monthly savings: ${savings}"
      
      scheduled_shutdown:
        title: "⏰ Scheduled Operations Configured"
        message: "Set up automatic shutdown/startup for {environment}. Estimated savings: {percentage}%"

# Integration settings
integrations:
  # AWS Cost Explorer integration
  cost_explorer:
    enabled: true
    region: "us-east-1"  # Cost Explorer is only available in us-east-1
    
    # Data retention
    historical_data_days: 90
    
    # Cost allocation tags
    cost_allocation_tags:
      - "Environment"
      - "Project"
      - "Team"
      - "CostCenter"
  
  # CloudWatch integration
  cloudwatch:
    enabled: true
    
    # Custom metrics
    custom_metrics:
      - name: "CostOptimization/PotentialSavings"
        unit: "None"
      - name: "CostOptimization/ResourceUtilization"
        unit: "Percent"
      - name: "CostOptimization/OptimizationActions"
        unit: "Count"
  
  # Terraform integration
  terraform:
    enabled: true
    
    # State file locations for cost analysis
    state_files:
      dev: "s3://homebrew-sync-terraform-state/dev/terraform.tfstate"
      staging: "s3://homebrew-sync-terraform-state/staging/terraform.tfstate"
      prod: "s3://homebrew-sync-terraform-state/prod/terraform.tfstate"

# Reporting configuration
reporting:
  # Report formats
  formats: ["text", "json", "html"]
  
  # Report storage
  storage:
    enabled: true
    s3_bucket: "homebrew-sync-cost-reports"
    retention_days: 365
  
  # Report sections
  sections:
    - current_costs
    - cost_trends
    - optimization_opportunities
    - resource_utilization
    - right_sizing_recommendations
    - potential_savings
    - implementation_plan
  
  # Dashboard integration
  dashboard:
    enabled: true
    update_frequency: "hourly"
    
    # Metrics to display
    key_metrics:
      - total_monthly_cost
      - cost_per_environment
      - optimization_savings
      - resource_utilization
      - cost_trends