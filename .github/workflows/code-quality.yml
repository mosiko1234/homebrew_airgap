name: Code Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_call:
    inputs:
      fix-formatting:
        description: 'Auto-fix formatting issues'
        required: false
        type: boolean
        default: false

jobs:
  python-quality:
    name: Python Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit pytest-cov
      
      - name: Run Python linting (flake8)
        run: |
          echo "::group::Python Linting"
          python -m flake8 shared/ lambda/ ecs/ scripts/ tests/ \
            --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(code)s: %(text)s'
          echo "::endgroup::"
      
      - name: Check Python formatting (black)
        run: |
          echo "::group::Python Formatting Check"
          python -m black --check --diff shared/ lambda/ ecs/ scripts/ tests/
          echo "::endgroup::"
      
      - name: Check import sorting (isort)
        run: |
          echo "::group::Import Sorting Check"
          python -m isort --check-only --diff shared/ lambda/ ecs/ scripts/ tests/
          echo "::endgroup::"
      
      - name: Auto-fix formatting (if requested)
        if: inputs.fix-formatting
        run: |
          echo "::group::Auto-fixing Python formatting"
          python -m black shared/ lambda/ ecs/ scripts/ tests/
          python -m isort shared/ lambda/ ecs/ scripts/ tests/
          echo "::endgroup::"
      
      - name: Run security scan (bandit)
        run: |
          echo "::group::Python Security Scan"
          python -m bandit -r shared/ lambda/ ecs/ scripts/ \
            -f json -o bandit-report.json -ll || true
          if [ -f bandit-report.json ]; then
            python -c "
import json
with open('bandit-report.json') as f:
    data = json.load(f)
    if data.get('results'):
        for result in data['results']:
            print(f\"::warning file={result['filename']},line={result['line_number']}::Security issue: {result['test_name']} - {result['issue_text']}\")
"
          fi
          echo "::endgroup::"
      
      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  terraform-quality:
    name: Terraform Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0
      
      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      
      - name: Install TFSec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      
      - name: Check Terraform formatting
        run: |
          echo "::group::Terraform Formatting Check"
          terraform fmt -check -recursive terraform/
          echo "::endgroup::"
      
      - name: Auto-fix Terraform formatting (if requested)
        if: inputs.fix-formatting
        run: |
          echo "::group::Auto-fixing Terraform formatting"
          terraform fmt -recursive terraform/
          echo "::endgroup::"
      
      - name: Validate Terraform configurations
        run: |
          echo "::group::Terraform Validation"
          
          # Validate main terraform directory
          cd terraform
          terraform init -backend=false
          terraform validate
          
          # Validate environment-specific configurations
          for env in dev staging prod; do
            if [ -d "environments/$env" ]; then
              echo "Validating $env environment..."
              cd "environments/$env"
              terraform init -backend=false
              terraform validate
              cd ../..
            fi
          done
          
          echo "::endgroup::"
      
      - name: Run TFLint
        run: |
          echo "::group::Terraform Linting"
          cd terraform
          tflint --init
          tflint --recursive --format=compact
          echo "::endgroup::"
      
      - name: Run TFSec security scan
        run: |
          echo "::group::Terraform Security Scan"
          tfsec terraform/ --format=json --out=tfsec-report.json --soft-fail
          
          if [ -f tfsec-report.json ]; then
            python -c "
import json
with open('tfsec-report.json') as f:
    data = json.load(f)
    if data.get('results'):
        for result in data['results']:
            severity = result.get('severity', 'MEDIUM')
            rule_id = result.get('rule_id', 'unknown')
            description = result.get('description', 'Security issue')
            filename = result.get('location', {}).get('filename', 'unknown')
            line = result.get('location', {}).get('start_line', 0)
            print(f\"::warning file={filename},line={line}::{severity}: {rule_id} - {description}\")
"
          fi
          echo "::endgroup::"
      
      - name: Upload TFSec report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-security-report
          path: tfsec-report.json
          retention-days: 30

  general-quality:
    name: General Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for trailing whitespace
        run: |
          echo "::group::Trailing Whitespace Check"
          if grep -r '[[:space:]]$' --include="*.py" --include="*.tf" --include="*.yml" --include="*.yaml" --include="*.sh" .; then
            echo "::error::Trailing whitespace found"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: Check for large files
        run: |
          echo "::group::Large Files Check"
          find . -type f -size +1M -not -path "./.git/*" -not -path "./.*" | while read file; do
            echo "::warning::Large file detected: $file ($(du -h "$file" | cut -f1))"
          done
          echo "::endgroup::"
      
      - name: Validate YAML files
        run: |
          echo "::group::YAML Validation"
          python -c "
import yaml
import sys
import os

errors = []
for root, dirs, files in os.walk('.'):
    # Skip hidden directories and git
    dirs[:] = [d for d in dirs if not d.startswith('.')]
    
    for file in files:
        if file.endswith(('.yml', '.yaml')):
            filepath = os.path.join(root, file)
            try:
                with open(filepath, 'r') as f:
                    yaml.safe_load(f)
                print(f'‚úì {filepath}')
            except yaml.YAMLError as e:
                errors.append(f'{filepath}: {e}')
                print(f'‚úó {filepath}: {e}')

if errors:
    print(f'::error::YAML validation failed for {len(errors)} files')
    sys.exit(1)
else:
    print('All YAML files are valid')
"
          echo "::endgroup::"
      
      - name: Check for secrets
        run: |
          echo "::group::Secrets Detection"
          # Simple regex patterns for common secrets
          if grep -r -E "(password|secret|key|token)\s*[:=]\s*['\"][^'\"]{8,}" --include="*.py" --include="*.tf" --include="*.yml" --include="*.yaml" --include="*.sh" . | grep -v "example\|template\|placeholder"; then
            echo "::warning::Potential secrets detected in code"
          fi
          echo "::endgroup::"

  comprehensive-check:
    name: Comprehensive Quality Check
    runs-on: ubuntu-latest
    needs: [python-quality, terraform-quality, general-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 bandit
          
          # Install terraform tools
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      
      - name: Run comprehensive quality check
        run: |
          python scripts/code-quality-check.py --report quality-report.json
      
      - name: Upload quality report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-quality-report
          path: quality-report.json
          retention-days: 30
      
      - name: Comment PR with quality results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
              const summary = report.summary;
              
              let comment = `## üìä Code Quality Report\n\n`;
              comment += `- **Total Checks:** ${summary.total_checks}\n`;
              comment += `- **Passed:** ${summary.passed_checks} ‚úÖ\n`;
              comment += `- **Failed:** ${summary.failed_checks} ‚ùå\n`;
              comment += `- **Success Rate:** ${summary.success_rate}\n\n`;
              
              if (summary.failed_checks > 0) {
                comment += `### ‚ùå Failed Checks:\n\n`;
                for (const [checkName, result] of Object.entries(report.details)) {
                  if (!result.passed) {
                    comment += `- **${checkName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}**\n`;
                    for (const error of result.errors) {
                      comment += `  - ${error}\n`;
                    }
                    comment += `\n`;
                  }
                }
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not read quality report:', error);
            }