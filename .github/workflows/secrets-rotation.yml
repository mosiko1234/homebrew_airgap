name: Secrets Rotation

on:
  workflow_dispatch:
    inputs:
      secret_name:
        description: 'Secret to rotate (leave empty for all)'
        required: false
        type: string
      environment:
        description: 'Environment to rotate secrets for'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - dev
        - staging
        - prod
      dry_run:
        description: 'Dry run - only validate current secrets'
        required: false
        default: true
        type: boolean
  schedule:
    # Run monthly on the first Sunday at 2 AM UTC
    - cron: '0 2 1 * 0'

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-current-secrets:
    name: Validate Current Secrets
    runs-on: ubuntu-latest
    outputs:
      validation-results: ${{ steps.validate.outputs.results }}
      needs-rotation: ${{ steps.check-rotation.outputs.needs_rotation }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate secrets configuration
        id: validate
        run: |
          echo "Validating secrets for repository: ${{ github.repository }}"
          
          if [[ "${{ github.event.inputs.environment }}" != "all" && -n "${{ github.event.inputs.environment }}" ]]; then
            python scripts/validate-secrets.py -r ${{ github.repository }} -e ${{ github.event.inputs.environment }} --json > validation-results.json
          else
            python scripts/validate-secrets.py -r ${{ github.repository }} --json > validation-results.json
          fi
          
          cat validation-results.json
          
          # Set output for next job
          echo "results=$(cat validation-results.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Check if rotation is needed
        id: check-rotation
        run: |
          # Check if any secrets are missing or if this is a scheduled run
          missing_count=$(cat validation-results.json | jq '.missing_secrets | length')
          
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ $missing_count -gt 0 ]]; then
            echo "needs_rotation=true" >> $GITHUB_OUTPUT
          else
            echo "needs_rotation=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload validation results
        uses: actions/upload-artifact@v3
        with:
          name: secrets-validation-results
          path: validation-results.json

  rotation-report:
    name: Generate Rotation Report
    runs-on: ubuntu-latest
    needs: validate-current-secrets
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download validation results
        uses: actions/download-artifact@v3
        with:
          name: secrets-validation-results

      - name: Generate rotation report
        run: |
          echo "# Secrets Rotation Report" > rotation-report.md
          echo "" >> rotation-report.md
          echo "**Repository:** ${{ github.repository }}" >> rotation-report.md
          echo "**Date:** $(date -u)" >> rotation-report.md
          echo "**Trigger:** ${{ github.event_name }}" >> rotation-report.md
          
          if [[ -n "${{ github.event.inputs.environment }}" ]]; then
            echo "**Environment:** ${{ github.event.inputs.environment }}" >> rotation-report.md
          fi
          
          if [[ -n "${{ github.event.inputs.secret_name }}" ]]; then
            echo "**Specific Secret:** ${{ github.event.inputs.secret_name }}" >> rotation-report.md
          fi
          
          echo "" >> rotation-report.md
          echo "## Current Status" >> rotation-report.md
          echo "" >> rotation-report.md
          
          # Parse validation results
          total_secrets=$(cat validation-results.json | jq '.total_secrets')
          missing_secrets=$(cat validation-results.json | jq '.missing_secrets | length')
          unknown_secrets=$(cat validation-results.json | jq '.unknown_secrets | length')
          
          echo "- **Total configured secrets:** $total_secrets" >> rotation-report.md
          echo "- **Missing required secrets:** $missing_secrets" >> rotation-report.md
          echo "- **Unknown secrets:** $unknown_secrets" >> rotation-report.md
          echo "" >> rotation-report.md
          
          if [[ $missing_secrets -gt 0 ]]; then
            echo "## Missing Required Secrets" >> rotation-report.md
            echo "" >> rotation-report.md
            cat validation-results.json | jq -r '.missing_secrets[]' | while read secret; do
              echo "- $secret" >> rotation-report.md
            done
            echo "" >> rotation-report.md
          fi
          
          if [[ $unknown_secrets -gt 0 ]]; then
            echo "## Unknown Secrets (Consider Cleanup)" >> rotation-report.md
            echo "" >> rotation-report.md
            cat validation-results.json | jq -r '.unknown_secrets[]' | while read secret; do
              echo "- $secret" >> rotation-report.md
            done
            echo "" >> rotation-report.md
          fi
          
          echo "## Rotation Recommendations" >> rotation-report.md
          echo "" >> rotation-report.md
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "This is a scheduled rotation check. Consider rotating the following secrets:" >> rotation-report.md
            echo "" >> rotation-report.md
            echo "- **SLACK_WEBHOOK_URL**: Rotate every 6 months" >> rotation-report.md
            echo "- **NOTIFICATION_EMAIL**: Update as needed" >> rotation-report.md
            echo "- **AWS Role ARNs**: Only if IAM roles were recreated" >> rotation-report.md
          fi
          
          if [[ $missing_secrets -gt 0 ]]; then
            echo "" >> rotation-report.md
            echo "## Action Required" >> rotation-report.md
            echo "" >> rotation-report.md
            echo "Missing secrets must be configured before deployments can succeed." >> rotation-report.md
            echo "" >> rotation-report.md
            echo "To configure missing secrets:" >> rotation-report.md
            echo '```bash' >> rotation-report.md
            echo "./scripts/manage-github-secrets.sh setup -r ${{ github.repository }}" >> rotation-report.md
            echo '```' >> rotation-report.md
          fi
          
          echo "" >> rotation-report.md
          echo "## Next Steps" >> rotation-report.md
          echo "" >> rotation-report.md
          
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "This was a dry run. No secrets were rotated." >> rotation-report.md
            echo "" >> rotation-report.md
            echo "To perform actual rotation:" >> rotation-report.md
            echo "1. Use the GitHub repository settings to update secrets manually" >> rotation-report.md
            echo "2. Or use the secrets management script:" >> rotation-report.md
            echo '```bash' >> rotation-report.md
            echo "./scripts/manage-github-secrets.sh setup -r ${{ github.repository }}" >> rotation-report.md
            echo '```' >> rotation-report.md
          else
            echo "Review the validation results and update secrets as needed." >> rotation-report.md
          fi

      - name: Upload rotation report
        uses: actions/upload-artifact@v3
        with:
          name: secrets-rotation-report
          path: rotation-report.md

      - name: Create issue for missing secrets
        if: fromJSON(needs.validate-current-secrets.outputs.validation-results).missing_secrets != null && length(fromJSON(needs.validate-current-secrets.outputs.validation-results).missing_secrets) > 0
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('rotation-report.md', 'utf8');
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîê Missing Required Secrets Detected',
              body: report,
              labels: ['security', 'configuration', 'urgent']
            });
            
            console.log(`Created issue #${issue.data.number}`);

  notify-rotation-status:
    name: Notify Rotation Status
    runs-on: ubuntu-latest
    needs: [validate-current-secrets, rotation-report]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python << 'EOF'
          import os
          import json
          import requests
          from datetime import datetime
          
          webhook_url = os.environ.get('SLACK_WEBHOOK_URL')
          if not webhook_url:
              print("No Slack webhook URL configured")
              exit(0)
          
          # Determine status and color
          validation_success = "${{ needs.validate-current-secrets.result }}" == "success"
          missing_secrets = ${{ fromJSON(needs.validate-current-secrets.outputs.validation-results).missing_secrets != null && length(fromJSON(needs.validate-current-secrets.outputs.validation-results).missing_secrets) > 0 }}
          
          if validation_success and not missing_secrets:
              color = "good"
              status = "‚úÖ All secrets configured correctly"
          elif missing_secrets:
              color = "danger"
              status = "‚ùå Missing required secrets detected"
          else:
              color = "warning"
              status = "‚ö†Ô∏è Secrets validation completed with warnings"
          
          # Create Slack message
          message = {
              "text": "Secrets Rotation Report",
              "attachments": [
                  {
                      "color": color,
                      "title": "GitHub Secrets Rotation Report",
                      "fields": [
                          {
                              "title": "Repository",
                              "value": "${{ github.repository }}",
                              "short": True
                          },
                          {
                              "title": "Status",
                              "value": status,
                              "short": True
                          },
                          {
                              "title": "Trigger",
                              "value": "${{ github.event_name }}",
                              "short": True
                          },
                          {
                              "title": "Date",
                              "value": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC"),
                              "short": True
                          }
                      ],
                      "footer": "GitHub Actions",
                      "ts": int(datetime.utcnow().timestamp())
                  }
              ]
          }
          
          # Add environment info if specified
          if "${{ github.event.inputs.environment }}" and "${{ github.event.inputs.environment }}" != "all":
              message["attachments"][0]["fields"].append({
                  "title": "Environment",
                  "value": "${{ github.event.inputs.environment }}",
                  "short": True
              })
          
          # Send notification
          response = requests.post(webhook_url, json=message)
          if response.status_code == 200:
              print("Slack notification sent successfully")
          else:
              print(f"Failed to send Slack notification: {response.status_code}")
          EOF

      - name: Send email notification
        if: env.NOTIFICATION_EMAIL != '' && (needs.validate-current-secrets.outputs.needs-rotation == 'true' || failure())
        env:
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        run: |
          echo "Email notification would be sent to: $NOTIFICATION_EMAIL"
          echo "Subject: GitHub Secrets Rotation Report - ${{ github.repository }}"
          echo "This is a placeholder for email notification implementation"
          # In a real implementation, you would integrate with SES or another email service