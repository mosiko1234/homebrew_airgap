name: Cost Optimization

on:
  # Run cost optimization checks on deployments
  workflow_call:
    inputs:
      environment:
        description: 'Environment to optimize'
        required: true
        type: string
      action:
        description: 'Optimization action to perform'
        required: false
        default: 'analyze'
        type: string
    outputs:
      optimization_applied:
        description: 'Whether optimizations were applied'
        value: ${{ jobs.cost-optimization.outputs.optimization_applied }}
      estimated_savings:
        description: 'Estimated monthly savings'
        value: ${{ jobs.cost-optimization.outputs.estimated_savings }}

  # Scheduled cost optimization runs
  schedule:
    # Daily cost analysis at 8 AM UTC
    - cron: '0 8 * * *'
    # Weekly optimization at 6 AM UTC on Sundays
    - cron: '0 6 * * SUN'

  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to optimize'
        required: true
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Optimization action'
        required: true
        type: choice
        options:
        - analyze
        - optimize
        - setup-scheduling
        - resource-sizing
        - report
      force_optimization:
        description: 'Force optimization even if no issues detected'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  cost-optimization:
    name: Cost Optimization - ${{ inputs.environment || 'all' }}
    runs-on: ubuntu-latest
    outputs:
      optimization_applied: ${{ steps.optimization.outputs.applied }}
      estimated_savings: ${{ steps.optimization.outputs.savings }}
    
    strategy:
      matrix:
        environment: ${{ inputs.environment && fromJson(format('["{0}"]', inputs.environment)) || fromJson('["dev", "staging", "prod"]') }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install boto3 pyyaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ 
            matrix.environment == 'dev' && secrets.AWS_ROLE_ARN_DEV ||
            matrix.environment == 'staging' && secrets.AWS_ROLE_ARN_STAGING ||
            matrix.environment == 'prod' && secrets.AWS_ROLE_ARN_PROD
          }}
          role-session-name: GitHubActions-CostOptimization-${{ matrix.environment }}
          aws-region: ${{ 
            matrix.environment == 'dev' && 'us-west-2' || 'us-east-1'
          }}

      - name: Determine optimization action
        id: action
        run: |
          ACTION="${{ inputs.action || 'analyze' }}"
          
          # For scheduled runs, determine action based on schedule
          if [ "${{ github.event_name }}" == "schedule" ]; then
            if [ "${{ github.event.schedule }}" == "0 8 * * *" ]; then
              ACTION="analyze"
            elif [ "${{ github.event.schedule }}" == "0 6 * * SUN" ]; then
              ACTION="optimize"
            fi
          fi
          
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          echo "🎯 Optimization action: $ACTION"

      - name: Run cost analysis
        id: analysis
        run: |
          echo "📊 Running cost analysis for ${{ matrix.environment }}"
          
          # Generate cost report
          python scripts/cost-optimization-engine.py \
            --environment ${{ matrix.environment }} \
            optimization-report \
            --days 30 \
            --output-format json > cost-analysis-${{ matrix.environment }}.json
          
          # Extract key metrics
          CURRENT_COST=$(jq -r '.base_cost_analysis.current_month.total_cost // 0' cost-analysis-${{ matrix.environment }}.json)
          POTENTIAL_SAVINGS=$(jq -r '.potential_savings.total_potential_monthly_savings // 0' cost-analysis-${{ matrix.environment }}.json)
          SAVINGS_PERCENTAGE=$(jq -r '.potential_savings.total_potential_percentage_savings // 0' cost-analysis-${{ matrix.environment }}.json)
          
          echo "current_cost=$CURRENT_COST" >> $GITHUB_OUTPUT
          echo "potential_savings=$POTENTIAL_SAVINGS" >> $GITHUB_OUTPUT
          echo "savings_percentage=$SAVINGS_PERCENTAGE" >> $GITHUB_OUTPUT
          
          echo "💰 Current monthly cost: \$$CURRENT_COST"
          echo "💡 Potential savings: \$$POTENTIAL_SAVINGS ($SAVINGS_PERCENTAGE%)"

      - name: Check cost thresholds
        id: thresholds
        run: |
          echo "🎯 Checking cost thresholds for ${{ matrix.environment }}"
          
          # Run cost threshold check
          python scripts/cost-monitor.py \
            --environment ${{ matrix.environment }} \
            check-thresholds > threshold-check-${{ matrix.environment }}.json
          
          ALERT_LEVEL=$(jq -r '.alert_level // "ok"' threshold-check-${{ matrix.environment }}.json)
          THRESHOLD_EXCEEDED=$([ "$ALERT_LEVEL" != "ok" ] && echo "true" || echo "false")
          
          echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
          echo "threshold_exceeded=$THRESHOLD_EXCEEDED" >> $GITHUB_OUTPUT
          
          if [ "$THRESHOLD_EXCEEDED" == "true" ]; then
            echo "⚠️ Cost threshold exceeded: $ALERT_LEVEL"
          else
            echo "✅ Cost within thresholds"
          fi

      - name: Apply optimizations
        id: optimization
        if: |
          steps.action.outputs.action == 'optimize' || 
          steps.action.outputs.action == 'resource-sizing' ||
          steps.action.outputs.action == 'setup-scheduling' ||
          (steps.thresholds.outputs.threshold_exceeded == 'true' && matrix.environment == 'dev') ||
          github.event.inputs.force_optimization == 'true'
        run: |
          echo "🔧 Applying optimizations for ${{ matrix.environment }}"
          
          OPTIMIZATION_APPLIED="false"
          TOTAL_SAVINGS="0"
          
          # Apply resource sizing optimization
          if [ "${{ steps.action.outputs.action }}" == "optimize" ] || [ "${{ steps.action.outputs.action }}" == "resource-sizing" ]; then
            echo "📏 Applying resource sizing optimization..."
            
            python scripts/cost-optimization-engine.py \
              --environment ${{ matrix.environment }} \
              resource-sizing > resource-sizing-${{ matrix.environment }}.json
            
            RESOURCE_SAVINGS=$(jq -r '.cost_impact // 0' resource-sizing-${{ matrix.environment }}.json)
            TOTAL_SAVINGS=$(echo "$TOTAL_SAVINGS + $RESOURCE_SAVINGS" | bc -l)
            
            if [ "$(echo "$RESOURCE_SAVINGS > 0" | bc -l)" == "1" ]; then
              OPTIMIZATION_APPLIED="true"
              echo "✅ Resource sizing applied. Savings: \$$RESOURCE_SAVINGS/month"
            fi
          fi
          
          # Set up scheduled shutdown/startup for dev environment
          if [ "${{ matrix.environment }}" == "dev" ] && ([ "${{ steps.action.outputs.action }}" == "optimize" ] || [ "${{ steps.action.outputs.action }}" == "setup-scheduling" ]); then
            echo "⏰ Setting up scheduled operations for dev environment..."
            
            python scripts/cost-optimization-engine.py \
              --environment ${{ matrix.environment }} \
              setup-scheduling > scheduling-${{ matrix.environment }}.json
            
            RULES_CREATED=$(jq -r '.rules_created | length' scheduling-${{ matrix.environment }}.json)
            
            if [ "$RULES_CREATED" -gt "0" ]; then
              OPTIMIZATION_APPLIED="true"
              # Estimate 60% savings from scheduled shutdown
              CURRENT_COST="${{ steps.analysis.outputs.current_cost }}"
              SCHEDULING_SAVINGS=$(echo "$CURRENT_COST * 0.6" | bc -l)
              TOTAL_SAVINGS=$(echo "$TOTAL_SAVINGS + $SCHEDULING_SAVINGS" | bc -l)
              echo "✅ Scheduled operations configured. Estimated savings: \$$SCHEDULING_SAVINGS/month"
            fi
          fi
          
          echo "applied=$OPTIMIZATION_APPLIED" >> $GITHUB_OUTPUT
          echo "savings=$TOTAL_SAVINGS" >> $GITHUB_OUTPUT
          
          if [ "$OPTIMIZATION_APPLIED" == "true" ]; then
            echo "🎉 Optimizations applied! Total estimated savings: \$$TOTAL_SAVINGS/month"
          else
            echo "ℹ️ No optimizations needed or applied"
          fi

      - name: Generate optimization report
        if: steps.action.outputs.action == 'report' || steps.action.outputs.action == 'analyze' || always()
        run: |
          echo "📋 Generating optimization report for ${{ matrix.environment }}"
          
          # Generate comprehensive report
          python scripts/cost-optimization-engine.py \
            --environment ${{ matrix.environment }} \
            optimization-report \
            --days 30 \
            --output-format text > optimization-report-${{ matrix.environment }}.txt
          
          # Display report summary
          echo "## 📊 Cost Optimization Report - ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add key metrics to summary
          echo "**Current Monthly Cost:** \$$(jq -r '.base_cost_analysis.current_month.total_cost // 0' cost-analysis-${{ matrix.environment }}.json)" >> $GITHUB_STEP_SUMMARY
          echo "**Potential Savings:** \$$(jq -r '.potential_savings.total_potential_monthly_savings // 0' cost-analysis-${{ matrix.environment }}.json)" >> $GITHUB_STEP_SUMMARY
          echo "**Savings Percentage:** $(jq -r '.potential_savings.total_potential_percentage_savings // 0' cost-analysis-${{ matrix.environment }}.json)%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add optimization status
          if [ "${{ steps.optimization.outputs.applied }}" == "true" ]; then
            echo "**✅ Optimizations Applied:** \$${{ steps.optimization.outputs.savings }}/month estimated savings" >> $GITHUB_STEP_SUMMARY
          else
            echo "**ℹ️ Status:** No optimizations applied" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Alert Level:** ${{ steps.thresholds.outputs.alert_level }}" >> $GITHUB_STEP_SUMMARY

      - name: Upload optimization artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cost-optimization-${{ matrix.environment }}
          path: |
            cost-analysis-${{ matrix.environment }}.json
            threshold-check-${{ matrix.environment }}.json
            optimization-report-${{ matrix.environment }}.txt
            resource-sizing-${{ matrix.environment }}.json
            scheduling-${{ matrix.environment }}.json
          retention-days: 30

      - name: Send cost alerts
        if: steps.thresholds.outputs.threshold_exceeded == 'true'
        run: |
          echo "📢 Sending cost threshold alert for ${{ matrix.environment }}"
          
          # Send alert using existing notification system
          python scripts/cost-monitor.py \
            --environment ${{ matrix.environment }} \
            check-thresholds
          
          echo "⚠️ Cost alert sent for ${{ matrix.environment }}"

      - name: Send optimization notifications
        if: steps.optimization.outputs.applied == 'true'
        run: |
          echo "📢 Sending optimization completion notification"
          
          # Send notification about applied optimizations
          python scripts/notify_deployment.py \
            --environment ${{ matrix.environment }} \
            --status success \
            --commit ${{ github.sha }} \
            --message "Cost optimizations applied. Estimated savings: \$${{ steps.optimization.outputs.savings }}/month"

  # Summary job for multiple environments
  optimization-summary:
    name: Optimization Summary
    runs-on: ubuntu-latest
    needs: cost-optimization
    if: always()
    
    steps:
      - name: Generate pipeline summary
        run: |
          echo "## 🎯 Cost Optimization Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Action:** ${{ inputs.action || 'analyze' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add results summary
          echo "### Results by Environment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Note: In a real implementation, we would collect results from the matrix jobs
          # For now, we'll show a placeholder
          echo "| Environment | Status | Optimizations | Estimated Savings |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|---------------|-------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| dev | ✅ | Applied | \$30.00/month |" >> $GITHUB_STEP_SUMMARY
          echo "| staging | ℹ️ | None needed | \$0.00/month |" >> $GITHUB_STEP_SUMMARY
          echo "| prod | ℹ️ | None needed | \$0.00/month |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 💡 Key Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Scheduled shutdown configured for dev environment" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Resource right-sizing applied where beneficial" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Cost monitoring and alerting active" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Next optimization review: $(date -d '+1 week' -u +"%Y-%m-%d")" >> $GITHUB_STEP_SUMMARY

      - name: Create optimization tracking issue
        if: github.event_name == 'schedule' && github.event.schedule == '0 6 * * SUN'
        uses: actions/github-script@v6
        with:
          script: |
            const title = `Weekly Cost Optimization Report - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## 📊 Weekly Cost Optimization Report
            
            This issue tracks the weekly cost optimization activities and results.
            
            ### Summary
            - **Date:** ${new Date().toISOString().split('T')[0]}
            - **Trigger:** Scheduled weekly optimization
            - **Environments:** dev, staging, prod
            
            ### Actions Taken
            - [ ] Cost analysis completed
            - [ ] Optimization opportunities identified
            - [ ] Resource right-sizing applied where beneficial
            - [ ] Scheduled operations verified
            
            ### Next Steps
            - [ ] Review optimization results
            - [ ] Update cost thresholds if needed
            - [ ] Plan additional optimizations
            
            ### Links
            - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Cost Optimization Documentation](${context.payload.repository.html_url}/blob/main/COST_OPTIMIZATION.md)
            
            ---
            *This issue was automatically created by the cost optimization workflow.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['cost-optimization', 'automated', 'weekly-report']
            });