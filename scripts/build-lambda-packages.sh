#!/bin/bash

# Build Lambda deployment packages
# This script creates ZIP files for Lambda functions and layers

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LAMBDA_DIR="$PROJECT_ROOT/lambda"
BUILD_DIR="$PROJECT_ROOT/build"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create build directory
create_build_dir() {
    log_info "Creating build directory..."
    rm -rf "$BUILD_DIR"
    mkdir -p "$BUILD_DIR"
    log_success "Build directory created: $BUILD_DIR"
}

# Build Lambda layer with dependencies
build_lambda_layer() {
    log_info "Building Lambda layer..."
    
    local layer_dir="$BUILD_DIR/layer"
    mkdir -p "$layer_dir/python"
    
    # Install dependencies
    pip install -r "$PROJECT_ROOT/requirements.txt" -t "$layer_dir/python"
    
    # Copy shared modules
    cp -r "$PROJECT_ROOT/shared" "$layer_dir/python/"
    
    # Create ZIP file
    cd "$layer_dir"
    zip -r "$BUILD_DIR/layer.zip" .
    
    log_success "Lambda layer built: $BUILD_DIR/layer.zip"
}

# Build orchestrator Lambda function
build_orchestrator() {
    log_info "Building orchestrator Lambda function..."
    
    local func_dir="$BUILD_DIR/orchestrator"
    mkdir -p "$func_dir"
    
    # Copy function code
    cp "$LAMBDA_DIR/orchestrator/handler.py" "$func_dir/"
    
    # Create ZIP file
    cd "$func_dir"
    zip -r "$BUILD_DIR/orchestrator.zip" .
    
    log_success "Orchestrator function built: $BUILD_DIR/orchestrator.zip"
}

# Build sync worker Lambda function
build_sync_worker() {
    log_info "Building sync worker Lambda function..."
    
    local func_dir="$BUILD_DIR/sync"
    mkdir -p "$func_dir"
    
    # Copy function code
    cp "$LAMBDA_DIR/sync/handler.py" "$func_dir/"
    
    # Create ZIP file
    cd "$func_dir"
    zip -r "$BUILD_DIR/sync.zip" .
    
    log_success "Sync worker function built: $BUILD_DIR/sync.zip"
}

# Calculate file hashes for Terraform
calculate_hashes() {
    log_info "Calculating file hashes..."
    
    cd "$BUILD_DIR"
    
    echo "# Lambda package hashes - generated by build-lambda-packages.sh"
    echo "# Use these values in your terraform.tfvars file"
    echo ""
    echo "lambda_layer_zip_path = \"../build/layer.zip\""
    echo "lambda_layer_source_hash = \"$(sha256sum layer.zip | cut -d' ' -f1)\""
    echo ""
    echo "lambda_orchestrator_zip_path = \"../build/orchestrator.zip\""
    echo "lambda_orchestrator_source_hash = \"$(sha256sum orchestrator.zip | cut -d' ' -f1)\""
    echo ""
    echo "lambda_sync_zip_path = \"../build/sync.zip\""
    echo "lambda_sync_source_hash = \"$(sha256sum sync.zip | cut -d' ' -f1)\""
    
    # Save to file
    {
        echo "# Lambda package hashes - generated by build-lambda-packages.sh"
        echo "# Use these values in your terraform.tfvars file"
        echo ""
        echo "lambda_layer_zip_path = \"../build/layer.zip\""
        echo "lambda_layer_source_hash = \"$(sha256sum layer.zip | cut -d' ' -f1)\""
        echo ""
        echo "lambda_orchestrator_zip_path = \"../build/orchestrator.zip\""
        echo "lambda_orchestrator_source_hash = \"$(sha256sum orchestrator.zip | cut -d' ' -f1)\""
        echo ""
        echo "lambda_sync_zip_path = \"../build/sync.zip\""
        echo "lambda_sync_source_hash = \"$(sha256sum sync.zip | cut -d' ' -f1)\""
    } > lambda-hashes.tfvars
    
    log_success "Hashes saved to: $BUILD_DIR/lambda-hashes.tfvars"
}

# Main execution
main() {
    log_info "Building Lambda deployment packages..."
    
    # Check prerequisites
    if ! command -v pip &> /dev/null; then
        log_error "pip is not installed. Please install Python and pip first."
        exit 1
    fi
    
    if ! command -v zip &> /dev/null; then
        log_error "zip is not installed. Please install zip utility first."
        exit 1
    fi
    
    create_build_dir
    build_lambda_layer
    build_orchestrator
    build_sync_worker
    calculate_hashes
    
    log_success "All Lambda packages built successfully!"
    log_info "Built packages:"
    ls -la "$BUILD_DIR"/*.zip
    
    log_info "Next steps:"
    log_info "1. Copy the hash values from $BUILD_DIR/lambda-hashes.tfvars to your terraform.tfvars"
    log_info "2. Run the deployment script: ./scripts/deploy.sh"
}

main "$@"